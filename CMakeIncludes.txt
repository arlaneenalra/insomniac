
if(${CMAKE_C_COMPILER_ID} MATCHES "Clang")
  set(CMAKE_C_FLAGS "-Wall -g -std=c99 -pedantic -DDEBUG -Wno-gnu-statement-expression -fprofile-instr-generate -fcoverage-mapping")
  set(CMAKE_SHARED_LINKER_FLAGS " -undefined dynamic_lookup -flat_namespace -fprofile-instr-generate")
else()
  set(CMAKE_C_FLAGS "-Wall -gdwarf-2 -O3 -std=gnu99 -pedantic -DDEBUG -lm -D_GNU_SOURCE")
endif()

include_directories(${PROJECT_SOURCE_DIR}/src/include)

# turn on shared libraries
set(BUILD_SHARED_LIBS 1)

file(GLOB_RECURSE INSC_LIB_TARGETS FOLLOW_SYMLINKS ${CMAKE_SOURCE_DIR}/src/lib/*.scm)

# Define an insomniac compile command.
macro(INSC_TARGET Name Input Output)
    set(INSC_TARGET_outputs "${CMAKE_CURRENT_BINARY_DIR}/${Input}.s")

    set(INSC_TARGET_usage "INSC_TARGET(<Name> <Input> <Output> ... <Extra link libraries>)")
    
    add_custom_command(OUTPUT ${INSC_TARGET_outputs}
        COMMAND ${CMAKE_BINARY_DIR}/src/insc-bootstrap ${Input} -o ${INSC_TARGET_outputs}
        VERBATIM
        DEPENDS ${Input} insc-bootstrap ${INSC_LIB_TARGETS} ${ARGN}
        COMMENT "[INSC] Compiling Insomniac Scheme code to ${INSC_TARGET_outputs}"
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    
    add_executable(${Output}
        ${INSC_TARGET_outputs}
        )

    set_target_properties(${Output}
        PROPERTIES LINKER_LANGUAGE C
        )

    target_link_libraries(${Output}
        insomniac_runtime
        )

    set(INSC_${Name}_OUTPUT "${CMAKE_CURRENT_BIN_DIR}/${Output}")
endmacro()

# Define a
